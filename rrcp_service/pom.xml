<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>rrcp_parent</artifactId>
        <groupId>com.rrcp</groupId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../rrcp_parent</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>rrcp_service</artifactId>
    <version>${rrcp_service.version}</version>
    <packaging>jar</packaging>

    <dependencies>
        <dependency>
            <groupId>com.rrcp</groupId>
            <artifactId>rrcp_api</artifactId>
            <version>${rrcp_api.version}</version>
        </dependency>
        <dependency>
            <groupId>com.hpw</groupId>
            <artifactId>umeng</artifactId>
            <version>${umeng.version}</version>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <targetPath>${project.build.directory}/classes</targetPath>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.properties</include>
                </includes>
            </resource>
            <!-- 结合com.alibaba.dubbo.container.Main -->
            <resource>
                <targetPath>${project.build.directory}/classes/META-INF/spring</targetPath>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>application.xml</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.0.0</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <mainClass>com.alibaba.dubbo.container.Main</mainClass>
                                </transformer>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.handlers</resource>
                                </transformer>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/spring.schemas</resource>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--<plugin>-->
            <!--<groupId>org.apache.maven.plugins</groupId>-->
            <!--<artifactId>maven-jar-plugin</artifactId>-->
            <!--<configuration>-->
            <!--<classesDirectory>target/classes/</classesDirectory>-->
            <!--<archive>-->
            <!--<manifest>-->
            <!--<mainClass>com.alibaba.dubbo.container.Main</mainClass>-->
            <!--&lt;!&ndash; 打包时 MANIFEST.MF文件不记录的时间戳版本 &ndash;&gt;-->
            <!--<useUniqueVersions>false</useUniqueVersions>-->
            <!--<addClasspath>true</addClasspath>-->
            <!--<classpathPrefix>lib/</classpathPrefix>-->
            <!--</manifest>-->
            <!--<manifestEntries>-->
            <!--<Class-Path>.</Class-Path>-->
            <!--</manifestEntries>-->
            <!--</archive>-->
            <!--</configuration>-->
            <!--</plugin>-->
            <!--<plugin>-->
            <!--<groupId>org.apache.maven.plugins</groupId>-->
            <!--<artifactId>maven-dependency-plugin</artifactId>-->
            <!--<executions>-->
            <!--<execution>-->
            <!--<id>copy-dependencies</id>-->
            <!--<phase>package</phase>-->
            <!--<goals>-->
            <!--<goal>copy-dependencies</goal>-->
            <!--</goals>-->
            <!--<configuration>-->
            <!--<type>jar</type>-->
            <!--<includeTypes>jar</includeTypes>-->
            <!--<outputDirectory>-->
            <!--${project.build.directory}/lib-->
            <!--</outputDirectory>-->
            <!--</configuration>-->
            <!--</execution>-->
            <!--</executions>-->
            <!--</plugin>-->
            <!-- ProGuard混淆插件-->
            <!--<plugin>-->
            <!--<groupId>com.github.wvengen</groupId>-->
            <!--<artifactId>proguard-maven-plugin</artifactId>-->
            <!--<version>2.0.11</version>-->
            <!--<executions>-->
            <!--<execution>-->
            <!--&lt;!&ndash; 混淆时刻，这里是打包的时候混淆&ndash;&gt;-->
            <!--<phase>package</phase>-->
            <!--<goals>-->
            <!--&lt;!&ndash; 使用插件的什么功能，当然是混淆&ndash;&gt;-->
            <!--<goal>proguard</goal>-->
            <!--</goals>-->
            <!--</execution>-->
            <!--</executions>-->
            <!--<configuration>-->
            <!--&lt;!&ndash; 是否将生成的PG文件安装部署&ndash;&gt;-->
            <!--<attach>true</attach>-->
            <!--&lt;!&ndash; 是否混淆&ndash;&gt;-->
            <!--<obfuscate>true</obfuscate>-->
            <!--&lt;!&ndash; 指定生成文件分类 &ndash;&gt;-->
            <!--<attachArtifactClassifier>pg</attachArtifactClassifier>-->
            <!--<options>-->
            <!--&lt;!&ndash; JDK目标版本1.7&ndash;&gt;-->
            <!--<option>-target 1.7</option>-->
            <!--&lt;!&ndash; 不做收缩（删除注释、未被引用代码）&ndash;&gt;-->
            <!--<option>-dontshrink</option>-->
            <!--&lt;!&ndash; 不做优化（变更代码实现逻辑）&ndash;&gt;-->
            <!--<option>-dontoptimize</option>-->
            <!--&lt;!&ndash; 不路过非公用类文件及成员&ndash;&gt;-->
            <!--<option>-dontskipnonpubliclibraryclasses</option>-->
            <!--<option>-dontskipnonpubliclibraryclassmembers</option>-->
            <!--&lt;!&ndash; 优化时允许访问并修改有修饰符的类和类的成员 &ndash;&gt;-->
            <!--<option>-allowaccessmodification</option>-->
            <!--&lt;!&ndash; 确定统一的混淆类的成员名称来增加混淆,防止冲突&ndash;&gt;-->
            <!--<option>-useuniqueclassmembernames</option>-->
            <!--&lt;!&ndash; 不混淆所有包名，Spring配置中有大量固定写法的包名&ndash;&gt;-->
            <!--<option>-keeppackagenames</option>-->
            <!--&lt;!&ndash; 不混淆所有特殊的类&ndash;&gt;-->
            <!--<option>-keepattributes-->
            <!--Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod-->
            <!--</option>-->
            <!--&lt;!&ndash; 不混淆所有的set/get方法，毕竟项目中使用的部分第三方框架（例如Shiro）会用到大量的set/get映射&ndash;&gt;-->
            <!--<option>-keepclassmembers public class * {void set*(***);*** get*();}</option>-->

            <!--&lt;!&ndash; 不混淆job包下的所有类名，且类中的方法也不混淆&ndash;&gt;-->
            <!--&lt;!&ndash;<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.job.** { &lt;methods&gt;; }</option> &ndash;&gt;-->
            <!--&lt;!&ndash; 不混淆filter包下的所有类名，这里主要是对Shiro的路踢人过滤器混淆，对类的属性和方法进行了混淆&ndash;&gt;-->
            <!--&lt;!&ndash;<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.filter.** </option> &ndash;&gt;-->
            <!--&lt;!&ndash; 不混淆model包中的所有类以及类的属性及方法，实体包，混淆了会导致ORM框架及前端无法识别&ndash;&gt;-->
            <!--&lt;!&ndash;<option>-keep class com.chinatelecom.gz.wy.zhukun.shiro_spring.model.** {*;}</option>&ndash;&gt;-->

            <!--&lt;!&ndash; com.test.prog.util, util包不混淆的类的属性及方法，实体包  &ndash;&gt;-->
            <!--&lt;!&ndash;<option>-keep class com.test.prog.util.finals.Const{ *; }</option>&ndash;&gt;-->

            <!--&lt;!&ndash; 不混淆凭证包下的所有类名，但对类中的属性、方法进行混淆，原因是Spring配置中用到了这个类名&ndash;&gt;-->
            <!--&lt;!&ndash;<option>-keep class com.test.prog.util.SecCode</option>&ndash;&gt;-->
            <!--&lt;!&ndash;<option>-keep class com.test.prog.util.exception.HihSoftHandlerException</option>&ndash;&gt;-->

            <!--&lt;!&ndash; 不混淆job包下的所有类名，且类中的方法也不混淆&ndash;&gt;-->
            <!--&lt;!&ndash;<option>-keep class com.test.prog.controller.** { &lt;methods&gt;; }</option>&ndash;&gt;-->
            <!--</options>-->
            <!--<outjar>${project.build.finalName}-pg.jar</outjar>-->
            <!--&lt;!&ndash; 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 &ndash;&gt;-->
            <!--<libs>-->
            <!--<lib>${java.home}/lib/rt.jar</lib>-->
            <!--<lib>${java.home}/lib/jce.jar</lib>-->
            <!--<lib>${java.home}/lib/security/local_policy.jar</lib>-->
            <!--<lib>${java.home}/lib/security/US_export_policy.jar</lib>-->
            <!--<lib>${java.home}/lib/ext/sunjce_provider.jar</lib>-->
            <!--</libs>-->
            <!--&lt;!&ndash; 加载文件的过滤器，就是你的工程目录了&ndash;&gt;-->
            <!--<inFilter>com/rrcp/**</inFilter>-->
            <!--&lt;!&ndash; 对什么东西进行加载，这里仅有classes成功，毕竟你也不可能对配置文件及JSP混淆吧&ndash;&gt;-->
            <!--<injar>classes</injar>-->
            <!--&lt;!&ndash; 输出目录&ndash;&gt;-->
            <!--<outputDirectory>${project.build.directory}</outputDirectory>-->
            <!--</configuration>-->
            <!--</plugin>-->
        </plugins>
    </build>
</project>